# {{ ansible_managed }}
# zsh version: {{ zsh_version }}
{% if zsh_plugin_manager == 'antigen' %}
# antigen version: {{ zsh_antigen_installed_version }}
{% endif %}
{% if zsh_plugin_manager == 'antidote' %}
# antidote version: {{ zsh_antidote_installed_version }}
{% endif %}


export TERM="{{ zsh_term }}"
export EDITOR="{{ zsh_editor }}"
export PATH="$PATH:{{ zsh_path | join(":") }}"
export GOPATH=$HOME/go
export GOBIN=$GOPATH/bin
export PATH=$GOBIN:$PATH:/usr/local/go/bin

HISTFILE=~/.zsh_history
HIST_STAMPS="{{ zsh_hist_stamps }}"
UPDATE_ZSH_DAYS="{{ zsh_update_interval }}"
COMPLETION_WAITING_DOTS="true"

# OMZ update settings
if [ $UPDATE_ZSH_DAYS -gt 0 ]; then
        zstyle :omz:update mode auto
        # This will check for updates every 7 days
        zstyle :omz:update frequency $UPDATE_ZSH_DAYS
fi

# TMUX - https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/tmux
if [ -f ~/.tmux.conf ] || [ -f ~/.tmux.conf.local ]; then
	ZSH_TMUX_AUTOSTART=true
	ZSH_TMUX_AUTOCONNECT=false
fi

{% set bundles_enabled = [] %}
{% if zsh_plugin_manager == 'antigen' %}
# ADOTDIR="{{ zsh_antigen_path_compat }}"
{% if zsh_shared %}
ANTIGEN_AUTO_CONFIG=false # disable updates
_ANTIGEN_THEME_COMPAT=false # disable theme cache
{% endif %}

ANTIGEN_BUNDLES="{{ zsh_antigen_path_compat }}/bundles"
ANTIGEN_PLUGIN_UPDATE_DAYS="{{ zsh_update_interval }}"
ANTIGEN_SYSTEM_UPDATE_DAYS="{{ zsh_update_interval }}"

source "{{ zsh_antigen_path_compat }}/antigen/antigen.zsh"

antigen use oh-my-zsh

{% for bundle in zsh_antigen_bundles -%}
    {%- if bundle is mapping -%}
        {% set valid = true -%}
        {% set command_not_exists = [] -%}

        {%- if bundle.when is defined and not bundle.when -%}
            {% set valid = false -%}
        {% endif -%}

        {% if bundle.command is defined -%}
            {% for cmd in zsh_register_commands_exists.results -%}
                {% if cmd.cmd is defined and cmd.rc != 0 and cmd.item.command == bundle.command -%}
                    {% if command_not_exists.append(1) %}{% endif -%}
                {% endif -%}
            {% endfor -%}
        {% endif -%}

        {% if valid and not command_not_exists %}
            {%- if 'zsh-syntax-highlighting' in bundle.name or 'fast-syntax-highlighting' in bundle.name -%}
# will fixed in zsh-autosuggestion v0.4 - https://github.com/zsh-users/zsh-autosuggestions/pull/218
if (( ZSHRC_LOAD_ONCE++ == 0 )); then
    antigen bundle {{ bundle.name }}
fi
{% else -%}
{% if bundles_enabled.append(bundle.name) %}{% endif -%}
antigen bundle {{ bundle.name }}
{% endif -%}
        {% endif -%}
    {%- else -%}
{% if bundles_enabled.append(bundle) %}{% endif -%}
antigen bundle {{ bundle }}
{% endif %}
{% endfor %}

# additional bundles
{% if zsh_antigen_bundles_extras is defined -%}
{% for bundle_item in zsh_antigen_bundles_extras %}
antigen bundle {{ bundle_item }}
{% endfor %}
{% endif %}

antigen apply

{% else %}

#autoload -U +X compinit && compinit
#autoload -U +X bashcompinit && bashcompinit

export ANTIDOTE_HOME=~/.cache/antidote

function is-macos {
    [[ $OSTYPE == darwin* ]] || return 1
}

source {{ zsh_antidote_path }}/antidote.zsh
zstyle ':antidote:bundle' use-friendly-names 'yes'

# Lazy-load antidote from its functions directory.
fpath=({{ zsh_antidote_path }}/functions $fpath)
autoload -Uz antidote

#ZSH=$(antidote path ohmyzsh/ohmyzsh)

# Set the root name of the plugins files (.txt and .zsh) antidote will use.
zsh_plugins=${ZDOTDIR:-~}/.zsh_plugins

# Generate a new static file whenever .zsh_plugins.txt is updated.
if [[ ! ${zsh_plugins}.zsh -nt ${zsh_plugins}.txt ]]; then
    antidote bundle <${zsh_plugins}.txt >|${zsh_plugins}.zsh
fi

# Source your static plugins file.
source ${zsh_plugins}.zsh

{% endif %}

{% if not zsh_share_history %}
unsetopt share_history
{% endif %}

autoload -Uz copy-earlier-word
zle -N copy-earlier-word

# aliases
{% for alias in zsh_aliases %}
{% if alias.alias != '' and (alias.bundle is not defined or alias.bundle in bundles_enabled) %}
alias '{{ alias.alias }}'="{{ alias.action }}"
{% endif %}
{% endfor %}

# fzf
export FZF_TMUX=0
export FZF_DEFAULT_OPTS="{{ zsh_fzf_default_opts }}"

# zsh-autosuggestions
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE={{ zsh_autosuggestions_max_length }}
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=240" # gray highlight

{% if prompt_theme_engine == 'omp' %}
# Load Oh My Posh configuration
if [ ! -f ~/.config/oh-my-posh/config.toml ]; then
    eval "$(oh-my-posh init zsh --config {{ omp_theme_dir }}/if_tea.omp.json)"
else
    eval "$(oh-my-posh init zsh --config  ~/.config/oh-my-posh/config.toml)"
fi

{% else %}
## powerline-go config
POWERLINE_BIN="$(which powerline-go)"
POWERLINE_FONT_MODE="patched"
POWERLINE_MODULES_LEFT="time,venv,user,host,ssh,cwd,perms,git,hg,ssh,root"
POWERLINE_MODULES_RIGHT="exit,duration,vgo,docker,kube"
# removed - git

if [ -n "${SSH_CLIENT}" ] ; then
    POWERLINE_MODULES_LEFT="host,user,cwd,perms,jobs"
fi

POWERLINE_CMD="${POWERLINE_BIN} -shorten-gke-names -modules ${POWERLINE_MODULES_LEFT} -modules-right ${POWERLINE_MODULES_RIGHT} -numeric-exit-codes -eval"
zmodload zsh/datetime

function preexec() {
  __TIMER=$EPOCHREALTIME
}

function powerline_precmd() {
  local __ERRCODE=$?
  local __DURATION=0

  if [ -n $__TIMER ]; then
    local __ERT=$EPOCHREALTIME
    __DURATION="$(($__ERT - ${__TIMER:-__ERT}))"
  fi

  eval "$($GOPATH/bin/powerline-go -error $__ERRCODE -modules ${POWERLINE_MODULES_LEFT} -shell zsh -eval -duration $__DURATION -numeric-exit-codes -modules-right ${POWERLINE_MODULES_RIGHT} -cwd-max-depth 2)"
  unset __TIMER
}

function install_powerline_precmd() {
  for s in "${precmd_functions[@]}"; do
    if [ "$s" = "powerline_precmd" ]; then
      return
    fi
  done
  precmd_functions+=(powerline_precmd)
}

if [ "$TERM" != "linux" ]; then
    install_powerline_precmd
fi

{% endif %}

# Aliases
alias suser='su -'

{% if zsh_load_etc_profile %}source /etc/profile{% endif %}

# user configs
[[ -r /etc/zsh/zshrc.local ]] && source /etc/zsh/zshrc.local
[[ -r "$HOME/.zshrc.local" ]] && source "$HOME/.zshrc.local"

## load dot files
_load_settings() {
  _dir="$1"
  if [ -d "$_dir" ]; then
    for config in $(find "$_dir" -maxdepth 10 -type f) ; do
      case "$config" in
        "$_dir"/*.zsh)
          source $config
          ;;
        *)
          :
          ;;
      esac
    done
  fi
}
_load_settings "$HOME/.config/zsh"

#fzf
#source ~/.fzf/shell/key-bindings.zsh
#[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
