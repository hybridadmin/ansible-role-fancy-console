# {{ ansible_managed }}
# zsh version: {{ zsh_version }}
# antigen version: {{ zsh_antigen_installed_version }}

export TERM="{{ zsh_term }}"
export EDITOR="{{ zsh_editor }}"
export PATH="{{ zsh_path | join(":") }}"
export GOPATH=$HOME/go
export GOBIN=$GOPATH/bin
export PATH=$GOBIN:$PATH:/usr/local/go/bin

HISTFILE=~/.zsh_history
HIST_STAMPS="{{ zsh_hist_stamps }}"
UPDATE_ZSH_DAYS="{{ zsh_update_interval }}"
COMPLETION_WAITING_DOTS="true"

# TMUX - https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/tmux
ZSH_TMUX_AUTOSTART=true
ZSH_TMUX_AUTOCONNECT=false

# ADOTDIR="{{ zsh_antigen_path_compat }}"
{% if zsh_shared %}
ANTIGEN_AUTO_CONFIG=false # disable updates
_ANTIGEN_THEME_COMPAT=false # disable theme cache
{% endif %}

ANTIGEN_BUNDLES="{{ zsh_antigen_path_compat }}/bundles"
ANTIGEN_PLUGIN_UPDATE_DAYS="{{ zsh_update_interval }}"
ANTIGEN_SYSTEM_UPDATE_DAYS="{{ zsh_update_interval }}"

{% if zsh_mc_solarized_skin %}export MC_SKIN="$HOME/.mc/lib/mc-solarized/solarized.ini"{% endif %}

source "{{ zsh_antigen_path_compat }}/antigen/antigen.zsh"

antigen use oh-my-zsh

{% set bundles_enabled = [] %}

{% for bundle in zsh_antigen_bundles -%}
    {%- if bundle is mapping -%}
        {% set valid = true -%}
        {% set command_not_exists = [] -%}

        {%- if bundle.when is defined and not bundle.when -%}
            {% set valid = false -%}
        {% endif -%}

        {% if bundle.command is defined -%}
            {% for cmd in zsh_register_commands_exists.results -%}
                {% if cmd.cmd is defined and cmd.rc != 0 and cmd.item.command == bundle.command -%}
                    {% if command_not_exists.append(1) %}{% endif -%}
                {% endif -%}
            {% endfor -%}
        {% endif -%}

        {% if valid and not command_not_exists %}
            {%- if 'zsh-syntax-highlighting' in bundle.name or 'fast-syntax-highlighting' in bundle.name -%}
# will fixed in zsh-autosuggestion v0.4 - https://github.com/zsh-users/zsh-autosuggestions/pull/218
if (( ZSHRC_LOAD_ONCE++ == 0 )); then
    antigen bundle {{ bundle.name }}
fi
{% else -%}
{% if bundles_enabled.append(bundle.name) %}{% endif -%}
antigen bundle {{ bundle.name }}
{% endif -%}
        {% endif -%}
    {%- else -%}
{% if bundles_enabled.append(bundle) %}{% endif -%}
antigen bundle {{ bundle }}
{% endif %}
{% endfor %}

antigen apply

###

{% if not zsh_share_history %}
unsetopt share_history
{% endif %}


autoload -Uz copy-earlier-word
zle -N copy-earlier-word

# hotkeys
{% for hotkey in zsh_hotkeys %}
{% if hotkey.hotkey != '' and (hotkey.bundle is not defined or hotkey.bundle in bundles_enabled) %}
bindkey '{{ hotkey.hotkey }}' {{ hotkey.action }}
{% endif %}
{% endfor %}

# aliases
{% for alias in zsh_aliases %}
{% if alias.alias != '' and (alias.bundle is not defined or alias.bundle in bundles_enabled) %}
alias '{{ alias.alias }}'="{{ alias.action }}"
{% endif %}
{% endfor %}

# zsh-vi-mode
# Fix: https://github.com/jeffreytse/zsh-vi-mode/issues/24
# https://github.com/jeffreytse/zsh-vi-mode#execute-extra-commands
zvm_after_init_commands+=('[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh')

# fzf
export FZF_TMUX=0
export FZF_DEFAULT_OPTS="{{ zsh_fzf_default_opts }}"

# fzf-widgets: fzf-change-reset-dir
{% if zsh_version is version('5.0', '>=') -%}
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs
{% endif %}
declare -p FZF_WIDGETS_OPTS > /dev/null 2>&1 && FZF_WIDGETS_OPTS[insert-history]="{{ zsh_fzf_ctrl_r_opts }}"
declare -p FZF_WIDGET_OPTS > /dev/null 2>&1 && FZF_WIDGET_OPTS[insert-history]="{{ zsh_fzf_ctrl_r_opts }}"

# zsh-autosuggestions
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE={{ zsh_autosuggestions_max_length }}
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=240" # gray highlight

{% if powerline_version == "go" %}
## powerline-go config
POWERLINE_BIN="$(which powerline-go)"
POWERLINE_FONT_MODE="patched"
POWERLINE_MODULES_LEFT="time,venv,user,host,ssh,cwd,perms,git,hg,ssh,root"
POWERLINE_MODULES_RIGHT="exit,duration,git,vgo,docker,kube"

if [ -n "${SSH_CLIENT}" ] ; then
    POWERLINE_MODULES_LEFT="host,user,cwd,perms,jobs"
fi

POWERLINE_CMD="${POWERLINE_BIN} -shorten-gke-names -modules ${POWERLINE_MODULES_LEFT} -modules-right ${POWERLINE_MODULES_RIGHT} -numeric-exit-codes -eval"
zmodload zsh/datetime

function preexec() {
  __TIMER=$EPOCHREALTIME
}

function powerline_precmd() {
  local __ERRCODE=$?
  local __DURATION=0

  if [ -n $__TIMER ]; then
    local __ERT=$EPOCHREALTIME
    __DURATION="$(($__ERT - ${__TIMER:-__ERT}))"
  fi

  eval "$($GOPATH/bin/powerline-go -error $__ERRCODE -modules ${POWERLINE_MODULES_LEFT} -shell zsh -eval -duration $__DURATION -numeric-exit-codes -modules-right ${POWERLINE_MODULES_RIGHT})"
  unset __TIMER
}

function install_powerline_precmd() {
  for s in "${precmd_functions[@]}"; do
    if [ "$s" = "powerline_precmd" ]; then
      return
    fi
  done
  precmd_functions+=(powerline_precmd)
}

if [ "$TERM" != "linux" ]; then
    install_powerline_precmd
fi

{% else %}
## powerline-shell config
function powerline_precmd() {
    PS1="$(powerline-shell --shell zsh $?)"
}

function install_powerline_precmd() {
  for s in "${precmd_functions[@]}"; do
    if [ "$s" = "powerline_precmd" ]; then
      return
    fi
  done
  precmd_functions+=(powerline_precmd)
}

if [ "$TERM" != "linux" ]; then
    install_powerline_precmd
fi
{% endif %}

# Aliases
alias suser='su -'

# user configs
[[ -r /etc/zsh/zshrc.local ]] && source /etc/zsh/zshrc.local
[[ -r "$HOME/.zshrc.local" ]] && source "$HOME/.zshrc.local"

## load dot files
_load_settings() {
  _dir="$1"
  if [ -d "$_dir" ]; then
    for config in $(find "$_dir" -maxdepth 10 -type f) ; do
      case "$config" in
        "$_dir"/*.zsh)
          source $config
          ;;
        *)
          :
          ;;
      esac
    done
  fi
}
_load_settings "$HOME/.config/zsh"

#fzf
#source ~/.fzf/shell/key-bindings.zsh
#[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
