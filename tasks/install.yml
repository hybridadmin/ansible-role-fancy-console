---

- name: add yadm repository
  get_url:
    url: "https://download.opensuse.org/repositories/home:TheLocehiliosan:yadm/CentOS_{{ ansible_distribution_major_version }}/home:TheLocehiliosan:yadm.repo"
    dest: /etc/yum.repos.d/yadm.repo
    mode: 644
  when: ansible_os_family == 'RedHat'

- name: add epel repo gpg key
  rpm_key:
    state: present
    key: https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-8
  when: (ansible_os_family == 'RedHat' and ansible_distribution_major_version == "8")

- name: install required epel repo
  package:
    name: "{{ item }}"
    state: present
  loop:
  - "https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_distribution_major_version }}.noarch.rpm"
  when: ansible_os_family == 'RedHat'

- name: add mariadb repo
  shell: |
    set -o pipefail
    curl -sS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | sudo bash
  changed_when: false
  when: ansible_os_family == 'RedHat'

- name: list required packages
  debug:
    msg: "{{ pkg_requirements }}"

- name: Install additional packages
  action: >
    {{ ansible_pkg_mgr }} name={{ pkg_requirements }} state=present update_cache=yes
    vars:
      packages: "{{ pkg_requirements }}"
  become: yes
  when: pkg_requirements is defined

- name: Install required pip packages
  pip:
    name: "{{ pip_packages }}"
    executable: "{{ pip3_which.stdout }}"
  when:
    - pip3_which is defined

- name: get latest garabik/grc version
  shell: |
    set -o pipefail
    curl --silent "https://api.github.com/repos/garabik/grc/releases/latest" |  grep '"tag_name":' |sed -E 's/.*"([^"]+)".*/\1/' | sed 's/v//g'
  args:
      executable: /bin/bash
  become: true
  register: grc_version
  changed_when: false

- name: clone garabik/grc {{ grc_version.stdout }}
  git:
    repo: https://github.com/garabik/grc.git
    dest: "/tmp/grc"
    version: "v{{ grc_version.stdout }}"
    force: yes
  become: yes
  become_user: "{{ zsh_user }}"
  register: zsh_register_grc_clone
  changed_when: false

- name: install garabik/grc {{ grc_version.stdout }}
  shell: |
    cd /tmp/grc
    ./install.sh
  changed_when: False
  become: yes

- name: get latest sharkdp/bat version
  shell: |
    set -o pipefail
    curl --silent "https://api.github.com/repos/sharkdp/bat/releases/latest" |  grep '"tag_name":' |sed -E 's/.*"([^"]+)".*/\1/' | sed 's/v//g'
  args:
      executable: /bin/bash
  become: true
  register: bat_version
  changed_when: false

- name: install sharkdp/bat {{ bat_version.stdout }}
  apt:
    deb: "https://github.com/sharkdp/bat/releases/download/v{{ bat_version.stdout }}/bat_{{ bat_version.stdout }}_amd64.deb"
  become: yes
  when:
    - bat_version.stdout is defined
    - ansible_os_family == 'Debian'

- name: install required powerline prompt
  block:
  - name: get latest justjanne/powerline-go version
    shell: |
      set -o pipefail
      curl --silent "https://api.github.com/repos/justjanne/powerline-go/releases/latest" |  grep '"tag_name":' |sed -E 's/.*"([^"]+)".*/\1/' | sed 's/v//g'
    args:
        executable: /bin/bash
    become: true
    register: poweline_go_version
    changed_when: false
    when: powerline_version == "go"

  - name: install powerline-go {{ poweline_go_version.stdout }}
    get_url:
      url: "https://github.com/justjanne/powerline-go/releases/download/v{{ poweline_go_version.stdout }}/powerline-go-linux-amd64"
      dest: "{{ zsh_user_dir.stdout }}/go/bin/powerline-go"
      mode: "a+x"
    when: powerline_version == "go"

#  - name: install powerline-go
#    shell: |
#      set -o pipefail
#      /usr/local/go/bin/go get -u github.com/justjanne/powerline-go
#    args:
#      executable: /bin/bash
#    ignore_errors: yes
#    changed_when: false
#    when: powerline_version == "go"

  - name: Install powerline-shell
    pip:
      name: powerline-shell
      executable: "{{ pip3_command }}"
    when:
      - powerline_version == "shell"

- name: install nano syntax highlighting
  git:
    repo: 'https://github.com/scopatz/nanorc.git'
    dest: "{{ zsh_user_dir.stdout }}/.nano"
    version: "master"
    force: yes
  become: yes
  become_user: "{{ zsh_user }}"
  changed_when: False

- name: clone antigen {{ zsh_antigen_version }}
  git:
    repo: https://github.com/zsh-users/antigen.git
    dest: "{{ zsh_antigen_path }}/antigen"
    version: "{{ zsh_antigen_version }}"
    force: yes
  become: yes
  become_user: "{{ zsh_user }}"
  register: zsh_register_antigen_clone

- name: clone iwfmp/mc-solarized-skin
  git:
    repo: https://github.com/iwfmp/mc-solarized-skin.git
    version: master
    dest: "{{ zsh_user_dir.stdout }}/.mc/lib/mc-solarized"
    force: yes
  become: yes
  become_user: "{{ zsh_user }}"
  when: zsh_mc_solarized_skin and not zsh_shared

- name: check fzf installed
  command: which fzf
  changed_when: false
  failed_when: false
  check_mode: no
  register: zsh_register_fzf_command

- name: get latest junegunn/fzf version
  shell: |
    set -o pipefail
    curl --silent "https://api.github.com/repos/junegunn/fzf/releases/latest" |  grep '"tag_name":' |sed -E 's/.*"([^"]+)".*/\1/' | sed 's/v//g'
  args:
      executable: /bin/bash
  become: true
  register: zsh_fzf_version
  changed_when: false

- name: Download junegunn/fzf {{ zsh_fzf_version.stdout }}
  unarchive:
    src: "{{ zsh_fzf_url }}"
    dest: /usr/local/bin
    mode: '0755'
    remote_src: yes
    creates: /usr/local/bin/fzf
  become: yes
  when: zsh_register_fzf_command.rc == 1

- name: set directory permissions
  file:
    name: "{{ zsh_antigen_path }}"
    owner: "{{ zsh_user }}"
    group: "{{ zsh_user_group }}"
    recurse: yes
  changed_when: false
