---
- name: Create user directories
  file:
    path: "{{ item }}"
    owner: "{{ zsh_user }}"
    group: "{{ zsh_user_group }}"
    state: directory
    mode: "0755"
  with_items:
    - "{{ zsh_user_dir }}/.local/bin"

- name: List required packages
  debug:
    msg: "{{ pkg_requirements }}"

- name: Install additional packages
  action: >
    {{ os_pkg_manager }} name={{ pkg_requirements }} state=present {{ extra_pkg_mgr_cmds }}
    vars:
      packages: "{{ pkg_requirements }}"
  become: true
  become_user: "root"
  when: pkg_requirements is defined

- name: Install latest yadm
  shell: |
    set -o pipefail
    {{ yadm_install_cmd }}
    chown -R {{ zsh_user }}:{{ zsh_user_group }} {{ zsh_user_dir }}/.yadm-project
  args:
    executable: /bin/bash
    creates: "{{ zsh_user_dir }}/.yadm-project"
  changed_when: false
  when: ansible_os_family == 'Debian' and ansible_os_family != 'Darwin'

- name: Get latest garabik/grc version
  shell: |
    set -o pipefail
    curl --silent "https://api.github.com/repos/garabik/grc/releases/latest" |  grep '"tag_name":' |sed -E 's/.*"([^"]+)".*/\1/' | sed 's/v//g'
  args:
    executable: /bin/bash
  register: grc_version
  changed_when: false
  when: ansible_os_family != 'Darwin'

- name: Clone garabik/grc {{ grc_version.stdout }}
  git:
    repo: https://github.com/garabik/grc.git
    dest: "/tmp/grc"
    version: "v{{ grc_version.stdout }}"
    force: yes
  become: true
  become_user: "{{ zsh_user }}"
  register: zsh_register_grc_clone
  changed_when: false

- name: Install garabik/grc {{ grc_version.stdout }}
  shell: |
    cd /tmp/grc
    ./install.sh
  changed_when: False
  become: true
  become_user: "root"
  when: ansible_os_family != 'Darwin'

- name: Install powerline prompt
  block:
    - name: Get latest justjanne/powerline-go version
      shell: |
        set -o pipefail
        curl --silent "https://api.github.com/repos/justjanne/powerline-go/releases/latest" |  grep '"tag_name":' |sed -E 's/.*"([^"]+)".*/\1/' | sed 's/v//g'
      args:
        executable: /bin/bash
      register: poweline_go_version
      changed_when: false
      when: powerline_version == "go" and ansible_os_family != 'Darwin'

    - name: Install powerline-go {{ poweline_go_version.stdout }} from Github
      get_url:
        url: "https://github.com/justjanne/powerline-go/releases/download/v{{ poweline_go_version.stdout }}/powerline-go-{{ ansible_system | lower }}-amd64"
        dest: "{{ zsh_user_dir }}/go/bin/powerline-go"
        mode: "a+x"
      when: powerline_version == "go" and powerline_go_from_github

    - name: Install powerline-go {{ poweline_go_version.stdout }} via cli
      shell: |
        set -o pipefail
        {{ go_executable }} install github.com/justjanne/powerline-go@latest
      args:
        executable: /bin/bash
      register: poweline_go_version
      changed_when: false
      when: powerline_version == "go" and not powerline_go_from_github

    - name: Install powerline-shell
      pip:
        name: powerline-shell
        executable: "{{ pip3_command }}"
      when:
        - powerline_version == "shell"

- name: Install nano syntax highlighting
  git:
    repo: "https://github.com/scopatz/nanorc.git"
    dest: "{{ nano_install_path }}"
    version: "master"
    force: yes
  become: true
  become_user: "{{ zsh_user }}"
  changed_when: false

- name: Clone antigen {{ zsh_antigen_version }}
  git:
    repo: https://github.com/zsh-users/antigen.git
    dest: "{{ zsh_antigen_path }}/antigen"
    version: "{{ zsh_antigen_version }}"
    force: yes
  become: true
  become_user: "{{ zsh_user }}"
  register: zsh_register_antigen_clone

- name: Clone iwfmp/mc-solarized-skin
  git:
    repo: https://github.com/iwfmp/mc-solarized-skin.git
    version: master
    dest: "{{ zsh_user_dir }}/.mc/lib/mc-solarized"
    force: yes
  become: true
  become_user: "{{ zsh_user }}"
  when: zsh_mc_solarized_skin and not zsh_shared | bool

- name: Check fzf installed
  command: which fzf
  changed_when: false
  failed_when: false
  check_mode: no
  register: zsh_register_fzf_command

- name: Get latest junegunn/fzf version
  shell: |
    set -o pipefail
    curl --silent "https://api.github.com/repos/junegunn/fzf/releases/latest" |  grep '"tag_name":' |sed -E 's/.*"([^"]+)".*/\1/' | sed 's/v//g'
  args:
    executable: /bin/bash
  register: zsh_fzf_version
  changed_when: false
  when: ansible_os_family != 'Darwin'

- name: Download junegunn/fzf {{ zsh_fzf_version.stdout }}
  unarchive:
    src: "{{ zsh_fzf_url }}"
    dest: /usr/local/bin
    mode: "0755"
    remote_src: yes
    creates: /usr/local/bin/fzf
  become: true
  become_user: "root"
  when:
    - zsh_register_fzf_command.rc == 1
    - ansible_os_family != 'Darwin'

- name: Set directory permissions
  file:
    name: "{{ zsh_antigen_path }}"
    owner: "{{ zsh_user }}"
    group: "{{ zsh_user_group }}"
    recurse: yes
  changed_when: false
