---

- name: Check zsh version
  shell: |
    set -o pipefail
    zsh --version | cut -d ' ' -f2
  args:
    executable: /bin/bash
  register: zsh_register_version
  check_mode: no
  changed_when: false
  tags: configure

- name: Set zsh_version variable
  set_fact:
    zsh_version: "{{ zsh_register_version.stdout }}"

- name: Merge bundles lists
  set_fact:
    zsh_antigen_bundles: "{{ zsh_antigen_bundles }} + {{ zsh_antigen_bundles_extras }}"
  #when: zsh_version != ""

- name: Disable autoupdate if zsh_shared install
  set_fact:
    zsh_update_interval: 0
  when: zsh_shared != "no"

- name: Check commands exists
  shell: "command -v {{ item.command }} || which {{ item.command }}"
  with_items: "{{ zsh_antigen_bundles }}"
  failed_when: false
  changed_when: false
  check_mode: no
  when: item.command is defined
  register: zsh_register_commands_exists

- name: Merge hotkeys lists
  set_fact:
    zsh_hotkeys: "{{ zsh_hotkeys }} + {{ zsh_hotkeys_extras }}"

- name: Check antigen version
  shell: |
    set -o pipefail
    cat {{ zsh_antigen_path }}/antigen/VERSION | tr -d 'v'
  args:
    executable: /bin/bash
  register: zsh_register_antigen_version
  changed_when: false
  become: true
  check_mode: no
  tags: configure

- name: Set zsh_antigen_installed_version variable
  set_fact:
    zsh_antigen_installed_version: "{{ zsh_register_antigen_version.stdout }}"

- name: Write .zshrc config
  template:
    src: zshrc.j2
    dest: "{{ zsh_config }}"
    owner: "{{ zsh_user }}"
    group: "{{ zsh_user_group }}"
    backup: yes
  when: zsh_antigen_installed_version | length > 0

- name: Create powerline-shell config dir
  file:
    path: "{{ zsh_user_dir }}/.config/powerline-shell"
    state: directory
  changed_when: False
  when: powerline_version == "shell"

- name: Write powerline-shell config
  template:
    src: powerline-config.j2
    dest: "{{ zsh_user_dir }}/.config/powerline-shell/config.json"
    owner: "{{ zsh_user }}"
    group: "{{ zsh_user_group }}"
    backup: yes
  changed_when: False
  when: powerline_version == "shell"

- name: Write powerline-shell theme
  template:
    src: powerline-theme.j2
    dest: "{{ zsh_user_dir }}/.config/powerline-shell/powerline-theme.py"
    owner: "{{ zsh_user }}"
    group: "{{ zsh_user_group }}"
    backup: yes
  changed_when: False
  when: powerline_version == "shell"

- name: Write nanorc file
  template:
    src: nanorc.j2
    dest: "{{ zsh_user_dir }}/.nanorc"
    owner: "{{ zsh_user }}"
    group: "{{ zsh_user_group }}"
    backup: yes
  changed_when: False

- name: Configure nanorc for syntax highlighting
  shell: cat "{{ user_home.stdout }}/.nano/nanorc" >> ~/.nanorc
  changed_when: False

- name: apply nanorc fix
  block:
  - name: html conf comment fix in nanorc
    replace:
      path: "{{ item }}"
      regexp: '(.*comment.*)'
      replace: '#\1'
    changed_when: False
    loop:
    - "{{ user_home.stdout }}/.nano/html.nanorc"
    - "{{ user_home.stdout }}/.nano/html.j2.nanorc"

  - name: etc-hosts conf comment fix in nanorc
    replace:
      path: "{{ user_home.stdout }}/.nano/etc-hosts.nanorc"
      regexp: 'normal'
      replace: 'white'
    changed_when: False
  when:
  - not ansible_check_mode

#- name: Clone dotfile repo
#  command: "yadm clone {{ dotfile_repo_url }} -f"
#  become: yes
#  become_user: "{{ zsh_user }}"
#  when: 
#  - use_powerline == true
#  - dotfile_repo_url is defined
#  ignore_errors: yes

- name: Set zsh as default shell
  user:
    name: "{{ zsh_user }}"
    shell: /bin/zsh
  become: true
  when: not zsh_shared

- name: check zsh env exists
  stat:
    path: "/etc/zsh/zshenv"
  register: zsh_env_stats

- name: Add skip_global_compinit for disable early compinit call in Ubuntu
  lineinfile:
    regexp: "skip_global_compinit=1"
    line: "skip_global_compinit=1"
    dest: /etc/zsh/zshenv
    state: present
  become: yes
  when:
  - ansible_distribution == 'Ubuntu'
  - zsh_env_stats.stat.exists
